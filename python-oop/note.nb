# 0 OOP-Python面向对象
- Python的面向对象
- 面向对象编程
    - 基础
    - 共有私有
    - 继承
    - 组合，Mixin
- 魔法函数
    - 魔法函数概述
    - 构造类魔法函数
    - 运算类魔法函数

# 1 面向对象概述 （ObjectOrirented. 00）
- OOP思想
    - 接触到任意一个任务，首先想到的是任务这个世界的构成，是由模型构成的
- 几个名词
    - OO：面向对象
    - OOA：面向对象分析
    - OOD：面向对象设计
    - OOA: 面向对象的实现
    - OOP：面向对象编程
    - OOA->OOD->OOI  ：面向对象的实现过程

- 2. 类和对象的概念
    - 类： 抽象名词，代表一个集合，共性的事物
    - 对象：具象的事物，单个个体
    - 类和对象的关系
        - 一个具象，代表一类事物的某一个个体
        - 一个是抽象，代表的是一大类事物
- 类中的内容，应该具有两个内容
    - 表明事物的特征，叫做属性（变量）
    - 表明事物功能或者动作，称为成员方法（函数）

# 类的基本实现
- 类的命名
    - 遵守变量命名的规则
    - 大驼峰（由一个或者多个单词构成，每个单词首字母大写，单词跟单词直接相连）
    - 尽量避开跟系统命名相似的命名
- 你如何声明一个类
    - 必须用class 关键字
    - 类由属性和方法构成，其他不允许出现
    - 成员属性定义可以直接使用变量赋值，如果没有值，须使用None
    - 案例 01.py
- 实例化类
        变量 = 类名（） # 实例化了一个对象
- 访问对象成员
    - 使用点操作符
        obj.成员属性名称
        obj.成员方法
- 可以通过内置变量检查类和对象的所有成员
    - 对象所有成员检查
        # dict前后各有两个下划线
        obj.__dict__
    - 类所有的成员
        # dict 前后各有两个下划线
        class_name.__dict__

# anaconda基本使用(以下LIUNIX上)
- anaconda主要是一个虚拟环境管理器
- 还是一个安装包管理器
- conda list:显示anaconda安装的包
- conda env list:显示anaconda的虚拟环境列表
- conda create -n xxx python=3.7:创建python版本为3.7的虚拟环境，名字为xxx

# 4. 类对象和实例对象的区别
-类和对象的成员分析
    - 类和对象都可以存储对象，成员可以归类所有，也可归队对象所有
    - 类存储成员使用的是与类关联的一个对象
- 相同点：
    - 当成员变量没有通过实例对象来改变时候，类对象和实例对象的成员变量相等（id和值）
- 不同点:
    - 当成员变量通过实例对象来改变了，实例对象不再和类对象相等
- 创建一个实例对象的时候，类中的成语变量不会放入对象中，而是得到一个空的对象，没有成员
- 通过创建的实例化对象对类中的成员变量重新赋值，改变了成员变量的值，但改变了成员变量的值只是存在于这个对象之中

# 5.关于self
- self 在对象的方法中表示当前对象本身，如果通过对象调用方法，那么对象会自动的传入当前的方法中，
- self 并不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量来代替
- 方法中有self形参的方法称为非绑定类的方法，可以通过对象访问，没有self的是绑定类方法，只能通过类访问
- 使用类对象访问绑定类的方法时，如果类方法中需要访问当前的类的成员，可以通过__class__成员名来访问

# 6.面向对象的三大特征
- 封装
- 继承
- 多态

## 6.1封装
- 封装就是对对象的成员进行访问限制
    - 公开 public
    - 受保护的 protected
    - 私有的 private
    - public private protected 不是python关键字
- 判别对象的位置
    - 对象内部
    - 对象外部
    - 子类中
- 私有
    - 私有成员是最高级别的封装，只能在当前类中或者对象中访问
    - 在成员前面添加两个下划线即可
    - Python的私有不是真的私有，是一种称为name mangling的改名策略
      可以使用对象.class_attributename访问
- 受保护的封装 protected
    - 受保护的封装是将对象成员进行一定级别的封装，然后，在类中或者子类中都可以进行访问，但是在外部不可以
    - 封装方法： 在成员名称前面加一个下划线即可
-  公共的封装
    - 实际上队成员没有任何操作，任何地方都可以访问

# 6.2 继承
- 继承就是一个类可以获得另一个类中的成员属性和成员方法
- 作用：减少代码，增加代码的复用功能，同时可以设置类和类之间的关系
- 继承与被继承的概念：
    - 被继承的类叫父类，也叫基类，也叫超类
    - 用于继承的类，叫子类也叫派生类
    - 继承与被继承一定存在 is-a 关系
- 继承的语法，见代码文件：继承.py
- 继承的特征
    - 所有的类都继承自object类，即所有类都是他的子类
    - 子类一旦继承父类，则可以使用父类中除了私有的成员外的所有属性和方法
    - 子类继承父类后并没有将父类的属性直接赋值到自己的属性中，而是通过引用关系访问调用(直接查id，看下父类对象引用的属性和子类对象引用的对象id就可以知道她是不是引用了)
    - 子类可以定义独有的成员属性和方法
    - 子类中定义的成员和父类成员如果相同，则优先使用子类成员变量
    - 子类如果想扩充父类的方法，可以在定义新方法的同时访问父类成员来进行代码重用，可以使用父类名.父类成员或者super().父类成员
- 继承变量函数的查找顺序问题
    - 优先查找自己的变量
    - 没有则查找父类
    - 构造函数如果本类中没有定义，则自动查找调用父类的构造函数
    - 如果本类有定义，则不在继续向上查找
- 构造函数
    - 是一类特殊的函数，简单来说就是在创建实例化对象的时候进行调用，生成实例化对象
    - 构造函数的使用是递归的，如果当前函数中有，那么使用当前构造函数，如果当前没有则使用父类的，父类没有就使用上一级，直到有构造函数才停止
    - 其实这就是函数的重写而已，如果此类不从写这个函数则引用父类的函数，和属性一样的用法，只是这个叫做方法的从写
    - 函数的从写：
        - 包括从写方法体：参数和函数名不变
        - 从写方法体和参数数量，实例化对象的时候可以根据构造函数的参数来选择需要哪一个构造函数
- super
    - super 不是一个关键字，是一个类（证明：type()）
    - super的作用是获取MRO（MethodResolustionOrder）列表中的第一个类（一般来说就是一个父类）
    - super 于父类直接没有任何实质性关系，但通过可以调用到父类
    - super 常用的两个方法：在子类中调用父类的构造函数

- 单继承和多继承
    - 单继承
        - 传承有序，逻辑清晰，语法简单，隐患小
        - 功能不能无限扩展，只能在当前唯一继承链中扩展
    - 多继承
        - 优点：类的功能扩展方便
        - 缺点：继承关系混乱
- 菱形继承/钻石继承问题
    - 多个子类继承自同一个父类，这些子类被同一个子类继承，于是形成了一个菱形图谱
    - mro
    - 关于多继承的MRO
        - 只有类对象才能访问__mro__方法
        - MRO就是多继承中，用于保存继承顺序的一个列表
        - Python本身采用C3算法来计算多继承的菱形继承进行计算的结果
        - MRO列表的计算原则：
            - 子类永远在父类的前面
            - 如果多个父类，则根据继承语法中括号中书写的顺序来存放
            - 如果多个类继承了同一个父类，孙子类中只会选择继承语法中书写顺序的第一个的第一个父类，由此上推
- 构造函数
  - 在对象进行实例化的时候自动调用的函数，
  - 构造函数不一定在类里面都有，如果某个类里面没有，实例化对象的时候会按照MRO顺序来查找类里面是否含有，找到就直接调用找到的构造函数
  - 所有的类里面的构造方法都是重写object里面的，当构造方法的参数不同时候，会引发一些错误，这时候按照提示在实例化对象的时候输入相应的参数即可
## 6.2 多态
- 多态就是同一个对象在不同情况下有不同的状态出现
- 多态不是语法，只是一种设计思维
- 多态性：一种调用方式，不同的执行效果
- 多态 ：同一事物的多种形态 ，动物分为：人类，狗类，猪类

一·Mixin设计模式
  - 主要采用多继承方式对类的功能进行扩展

- 我们使用多继承语法来实现Mixin
- 使用Mixin实现多继承的时候非常小心
    - 首先它必须表示某一单一功能，则写多个Mixin
    - Mixin不能依赖子类的实现
    - 子类即使没有继承Mixin类，也能照样工作，只是缺少了某些功能
- 优点：
    - 可以在不修改类的情况下扩展类的功能
    - 可以根据需要任意调整功能类的组合
    - 可以避免创建很多新的类，避免继承错乱

# 7.类的相关函数
- issubclass:检测一个类是否是另一个类的子类
- isinstance:判断一个对象是否是一个类的实例对象，如果他是一个类的实例对象，那么他也是这个类的父类的实例对象
- hasattr:检测对象是否有某个成员
- getattr:get attribute
- setattr:set attibute
- delattr:delete attribute
- dir：获取对象的方法列表

# 7.类的成员描述符
- 类的成员描述符是为了在类中对成员属性进行操作而创建的一种方式
  - get: 获取属性的操作
  - set : 设置属性
  - delete: 删除操作
- 使用成员描述符有三种方法
  - 使用类实现描述器
  - 使用属性修饰符
  - 使用property函数
    - property(fget, fset, fdelete, doc)
- 无论哪种修饰符都是为了对成员属性进行相应的控制
  - 类的方式 ：适合多个类中的多个属性共用一个描述符
  - property： 使用当前类中使用，可以控制一个类中的多个属性
  - 属性修饰符： 使用于当前类中使用，控制一个类中的一个属性